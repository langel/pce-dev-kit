; Small C HuC6280 (v0.2, 08/Nov/97)
;
; Taken to HuC (22/Feb/00)
;
;
; This file generated by HuC (v3.xx, 2011/06/26, Aetherbyte release)
; on Mon Apr 09 18:54:04 2012
;

HUC	= 1

	.include "startup.asm"
	.data
	.bank DATA_BANK

	.code

;----------------------------------------------------------------------------------------
; these are the various registers on the PSG. Definately not complete
;----------------------------------------------------------------------------------------
ChannelSelect       equ    $0800
MainVolume          equ    $0801
ChanFreqLo          equ    $0802
ChanFreqHi          equ    $0803
ChanControl         equ    $0804
ChanBalance         equ    $0805
ChanData            equ    $0806
ChanON              equ    $80
ChanDDA             equ    $40
ChanVolume          equ    $1F
;----------------------------------------------------------------------------------------
; these are useful masks for dealing with the psg.
;----------------------------------------------------------------------------------------
ChanXFer            equ    $0           ; transfer to channel
ChanReset           equ    $40          ; channel off, dda On => reset
LeftVolume          equ    $F0
RightVolume         equ    $0F
;----------------------------------------------------------------------------------------
; these are the various CD-BIOS MML Functions. Definately not complete
;----------------------------------------------------------------------------------------
PSGF_ON			.equ	$00
PSGF_OFF		.equ    $01
PSGF_INIT		.equ	$02
PSGF_BANK		.equ    $03			; already defined 
PSGF_TRACK  		.equ    $04
PSGF_WAVE		.equ    $05
PSGF_ENV		.equ    $06
PSGF_FM			.equ    $07
PSGF_PE			.equ    $08
PSGF_PC			.equ    $09
PSGF_TEMPO		.equ	$10
PSGF_PLAY		.equ	$0B
PSGF_MSTAT		.equ	$0c
PSGF_SSTAT		.equ	$0D
PSGF_MSTOP		.equ	$0E
PSGF_SSTOP		.equ    $0F
PSGF_ASTOP		.equ    $10
PSGF_MVOFF 		.equ    $11
PSGF_CONT    	.equ	$12
PSGF_FDOUT		.equ	$13
PSGF_DCNT		.equ	$14
	.proc _psgInit
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_INIT
    sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    ;-----------------------------------------------------------------
	; save it, and call bios.
    ;-----------------------------------------------------------------
	sta 	<_al     	; _al is driver system number
    jsr		psg_bios
LL1:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgOn
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_ON
    sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    ;-----------------------------------------------------------------
	; save it, and call bios.
    ;-----------------------------------------------------------------
    sta	<_al          ; irq to use. 1 = vsync
                      ;             0 = timer
    jsr	psg_bios
LL2:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgOff
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_OFF
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; no parameters: just call bios.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL3:

	  rts
	.endp

	.proc _psgRegisterBank
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_BANK
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameters off stack and save them
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     <_ah
    ldy     #2	
	lda		[__stack],Y
    sta     <_al
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL4:

	__addmi	4,__stack
	  rts
	.endp

	.proc _psgRegisterTrack
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_TRACK
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     <_al
	iny
	lda		[__stack],Y
    sta     <_ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL5:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterWave
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_WAVE
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL6:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterEnvelope
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_ENV
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL7:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterFM
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_FM
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL8:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterPE
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_PE
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL9:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgRegisterPC
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_PC
    sta		<_dh          ; save function
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
	iny
	lda		[__stack],Y
    sta     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL10:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgPlay
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_PLAY
	sta		<_dh
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; and call bios.
    ;-----------------------------------------------------------------
	jsr 	psg_bios
LL11:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgMStat
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
    lda		#PSGF_MSTAT
    sta		<_dh         ; set function number
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
	jsr		psg_bios     ; get status
	tax
	lda		#0			 ; clear high byte of status
LL12:

	  rts
	.endp

	.proc _psgSStat
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_SSTAT
	sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
	jsr		psg_bios      ; get status
	tax
	lda		#0            ; clear high byte
LL13:

	  rts
	.endp

	.proc _psgMStop
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_MSTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
    jsr		psg_bios
	lda		#$0
LL14:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgSStop
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_SSTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; read track status and return.
    ;-----------------------------------------------------------------
    jsr		psg_bios
	lda		#0
LL15:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgAllStop
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_ASTOP
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; and call bios to stop everything
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL16:

	  rts
	.endp

	.proc _psgMute
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_MVOFF
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; and call bios to mute tracks
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL17:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgCont
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_CONT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; ask bios to continue tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL18:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgFadeOut
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_FDOUT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    stz     _ah
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL19:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgDelay
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_DCNT
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL20:

	__addmi	2,__stack
	  rts
	.endp

	.proc _psgTempo
	__pushw
    ;-----------------------------------------------------------------
	; Init function code.
	;-----------------------------------------------------------------
	lda		#PSGF_TEMPO
    sta		<_dh          ; set function number
    ;-----------------------------------------------------------------
	; get parameter off stack and save it
    ;-----------------------------------------------------------------
    ldy		#0
	lda		[__stack],Y
    sta     _al
    ;-----------------------------------------------------------------
	; ask bios to fade tracks.
    ;-----------------------------------------------------------------
    jsr		psg_bios
LL21:

	__addmi	2,__stack
	  rts
	.endp

	.proc _sngInit
;-----------------
; set bank values 
;
	lda 	#$03
	sta	<_dh
	lda	#BANK(_sngBank1)
	sta	<_al
	stz	<_ah
	jsr	psg_bios
;--------------------------------
; set track index table location 
;
	lda    #$04
	sta    <_dh
	lda	#LOW(TRACK_IX)
	sta	<_al
	lda	#HIGH(TRACK_IX)
	sta	<_ah
	jsr	psg_bios
;--------------------
; register modulation 
;
	lda	#7
	sta	<_dh
	lda	#LOW(MODU_IX)
	sta	<_al
	lda	#HIGH(MODU_IX)
	sta	<_ah
	jsr	psg_bios
;--------------------
; register percussion 
;
	lda	#9
	sta	<_dh
	lda	#LOW(DRUM_TAB)
	sta	<_al
	lda	#HIGH(DRUM_TAB)
	sta	<_ah
	jsr	psg_bios
;--------------------
; Set Tempo 
;
	lda	#10
	sta	<_dh
	lda	#70
	sta	<_al
	jsr	psg_bios
LL22:

	  rts
	.endp

    .data
    .bank   9
    .org    $8000
_sngBank1:
    .include  "mml/gnop.asm"
    .code
	.proc _main
	__addmi	-8,__stack
	  call	_init_satb
	__ldwi	5
	  call	_psgInit
	__ldwi	0
	  call	_psgOn
	__ldwi	0
	  call	_psgPlay
	  call	_sngInit
	__ldwi	0
	  call	_psgDelay
LL24:

	__ldwi	1
	__tstw
	__lbeq	LL25
	__ldwi	0
	  ldy	#1
	  call	_vsync
	__pea_s	4
	__ldwi	0
	  call	_joy
	__stwps
	__pea_s	2
	  call	_psgMStat
	__stwps
	__pea_s	0
	  call	_psgSStat
	__stwps
	__ldwi	LL0+0
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	9
	  call	_put_string.3
	__ldwi	LL0+36
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	11
	  call	_put_string.3
	__ldwi	LL0+72
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	13
	  call	_put_string.3
	__ldwi	LL0+108
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	15
	  call	_put_string.3
	__ldwi	LL0+144
	__phw	3,3
	__ldwi	0
	__phb	1
	__ldwi	17
	  call	_put_string.3
	__ldw_s	4
	__andwi	1
	__tstw
	__lbeq	LL26
	__ldwi	1
	  call	_psgPlay
LL26:

	__ldw_s	4
	__andwi	2
	__tstw
	__lbeq	LL27
	__ldwi	2
	  call	_psgPlay
LL27:

	__lbra	LL24
LL25:

LL23:

	__addmi	8,__stack
	  rts
	.endp

	.data
	.bank CONST_BANK
	.org $4000
LL0:
	.db	32,32,32,32,32,32,32,32
	.db	32,32,83,113,117,105,114,114
	.db	101,108,32,51,46,48,32,32
	.db	32,32,32,32,32,32,32,32
	.db	32,32,32,0,32,80,108,101
	.db	97,115,101,32,100,105,114,101
	.db	99,116,32,97,108,108,32,113
	.db	117,101,115,116,105,111,110,115
	.db	32,116,111,32,32,32,32,0
	.db	32,32,32,32,32,32,97,101
	.db	116,104,101,114,98,121,116,101
	.db	64,103,109,97,105,108,46,99
	.db	111,109,32,32,32,32,32,32
	.db	32,32,32,0,32,111,114,32
	.db	112,111,115,116,32,97,116,32
	.db	97,101,116,104,101,114,98,121
	.db	116,101,46,99,111,109,47,102
	.db	111,114,117,109,32,32,32,0
	.db	32,32,32,32,32,84,104,97
	.db	110,107,32,121,111,117,32,97
	.db	110,100,32,69,110,106,111,121
	.db	33,33,33,33,33,33,32,32
	.db	32,32,32,0

	.bss
_track:		.ds	1
_mstat:		.ds	1
_sstat:		.ds	1
_VSyncCnt:		.ds	2
_TimerCnt:		.ds	2
_MainCnt:		.ds	2
_SubCnt:		.ds	2
__arg:

;0 error(s) in compilation
;	literal pool:180
;	constant pool:0
;	global pool:1248
;	Macro pool:1177
